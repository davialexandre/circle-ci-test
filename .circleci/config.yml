# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1
commands:
  run_php_tests:
    description: "Runs the PHP tests for a given extension"
    parameters:
      for:
        type: string
    steps:
      - run:
          name: "Test << parameters.for >>"
          command: |
            export PATH=/buildkit/buildkit/bin:$PATH
            cd << parameters.for >>
            /buildkit/buildkit/bin/phpunit4 --testsuite "Unit Tests" --log-junit /buildkit/project/test-results/phpunit/<< parameters.for >>.xml
          working_directory: "/buildkit/buildkit/build/drupal-clean/sites/all/modules/civicrm/tools/extensions/civihr"
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: davialexandre/civihr-test:latest
        user: buildkit

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      - run:
          command: |
            sudo service mysql start
            export PATH=/buildkit/buildkit/bin:$PATH
            git clone --depth 1 https://github.com/compucorp/civihr
            git clone --depth 1 https://github.com/compucorp/civihr-tasks-assignments civihr_tasks
            git clone --depth 1 https://github.com/compucorp/org.civicrm.shoreditch
            git clone --depth 1 https://github.com/compucorp/org.civicrm.styleguide
#            drush cvapi extension.refresh
#            ./civihr/bin/drush-install.sh
          working_directory: "/buildkit/buildkit/build/drupal-clean/sites/all/modules/civicrm/tools/extensions"

      - run_php_tests:
          for: "uk.co.compucorp.civicrm.hrcore"

      - run_php_tests:
          for: "com.civicrm.hrjobroles"

      - run_php_tests:
          for: "contactaccessrights"

      - run_php_tests:
          for: "uk.co.compucorp.civicrm.hrleaveandabsences"

      - run_php_tests:
          for: "hrjobcontract"

      - run_php_tests:
          for: "uk.co.compucorp.civicrm.hrsampledata"

      - run_php_tests:
          for: "hrvisa"

      - run_php_tests:
          for: "hrmergency"

      - run_php_tests:
          for: "uk.co.compucorp.civicrm.hrcontactactionsmenu"
#      - run:
#          command: |
#            export PATH=/buildkit/buildkit/bin:$PATH
#            cd uk.co.compucorp.civicrm.hrcore
#            /buildkit/buildkit/bin/phpunit4 --testsuite "Unit Tests" --log-junit /buildkit/project/test-results/phpunit/hrcore.xml
#            cd ../com.civicrm.hrjobroles
#            /buildkit/buildkit/bin/phpunit4 --testsuite "Unit Tests" --log-junit /buildkit/project/test-results/phpunit/hrjobroles.xml
#            cd ../contactaccessrights
#            /buildkit/buildkit/bin/phpunit4 --testsuite "Unit Tests" --log-junit /buildkit/project/test-results/phpunit/contactaccessrights.xml
#            cd ../uk.co.compucorp.civicrm.hrleaveandabsences
#            /buildkit/buildkit/bin/phpunit4 --testsuite "Unit Tests" --log-junit /buildkit/project/test-results/phpunit/hrleaveandabsences.xml
#            cd ../hrjobcontract
#            /buildkit/buildkit/bin/phpunit4 --testsuite "Unit Tests" --log-junit /buildkit/project/test-results/phpunit/hrjobcontract.xml
#            cd ../uk.co.compucorp.civicrm.hrsampledata
#            /buildkit/buildkit/bin/phpunit4 --testsuite "Unit Tests" --log-junit /buildkit/project/test-results/phpunit/hrsampledata.xml
#          working_directory: "/buildkit/buildkit/build/drupal-clean/sites/all/modules/civicrm/tools/extensions/civihr"

#      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
#      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
#      - restore_cache:
#          keys:
#            # "composer.lock" can be used if it is committed to the repo
#            - v1-dependencies-{{ checksum "composer.json" }}
#            # fallback to using the latest cache if no exact match is found
#            - v1-dependencies-
#
#      - run: composer install -n --prefer-dist
#
#      - save_cache:
#          key: v1-dependencies-{{ checksum "composer.json" }}
#          paths:
#            - ./vendor
#      - restore_cache:
#          keys:
#            - node-v1-{{ checksum "package.json" }}
#            - node-v1-
#      - run: yarn install
#      - save_cache:
#          key: node-v1-{{ checksum "package.json" }}
#          paths:
#            - node_modules

      # run tests with phpunit or codecept
#      - run: ./vendor/bin/phpunit --log-junit test-results/phpunit/results.xml
#      - run: ./vendor/bin/codecept build
#      - run: ./vendor/bin/codecept run

      - store_test_results:
          path: test-results
